package mydbproject24;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;

public class MainFrame extends javax.swing.JFrame {
    Connection con = MyConnection.con;
    String gs = "";
    
    JTextField[] tf = new JTextField[9];
    JLabel[] lb = new JLabel[9];
    String[] tables = new String[9];
    
    public MainFrame() {
        initComponents();
        jLabel10.setText("");
        jLabel11.setText("");
        jTextField10.setText("");
        
        treeNodes();
        
        tf[0] = jTextField1;
        tf[1] = jTextField2;
        tf[2] = jTextField3;
        tf[3] = jTextField4;
        tf[4] = jTextField5;
        tf[5] = jTextField6;
        tf[6] = jTextField7;
        tf[7] = jTextField8;
        tf[8] = jTextField9;
        
        lb[0] = jLabel1;
        lb[1] = jLabel2;
        lb[2] = jLabel3;
        lb[3] = jLabel4;
        lb[4] = jLabel5;
        lb[5] = jLabel6;
        lb[6] = jLabel7;
        lb[7] = jLabel8;
        lb[8] = jLabel9;
        
        tables[0] = "Apply";
        tables[1] = "Customer";
        tables[2] = "Equipment";
        tables[3] = "Equipment_Check";
        tables[4] = "logTable";
        tables[5] = "Program";
        tables[6] = "Repairman";
        tables[7] = "Room";
        tables[8] = "Trainer";
    }
    
    private void treeNodes(){
        DefaultTreeModel treeModel = (DefaultTreeModel) jTree1.getModel();
        
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("GYM_DB");
        DefaultMutableTreeNode tables = new DefaultMutableTreeNode("Tables");
        DefaultMutableTreeNode reports = new DefaultMutableTreeNode("Reports");
        DefaultMutableTreeNode utilities = new DefaultMutableTreeNode("Utilities");
        DefaultMutableTreeNode about = new DefaultMutableTreeNode("About");
        
        treeModel.setRoot(root);
        root.add(tables);
        root.add(reports);
        root.add(utilities);
        root.add(about);
        
        DefaultMutableTreeNode t1 = new DefaultMutableTreeNode(Tables.Apply);
        DefaultMutableTreeNode t2 = new DefaultMutableTreeNode(Tables.Customer);
        DefaultMutableTreeNode t3 = new DefaultMutableTreeNode(Tables.Equipment);
        DefaultMutableTreeNode t4 = new DefaultMutableTreeNode(Tables.Equipment_Check);
        DefaultMutableTreeNode t5 = new DefaultMutableTreeNode(Tables.logTable);
        DefaultMutableTreeNode t6 = new DefaultMutableTreeNode(Tables.Program);
        DefaultMutableTreeNode t7 = new DefaultMutableTreeNode(Tables.Repairman);
        DefaultMutableTreeNode t8 = new DefaultMutableTreeNode(Tables.Room);
        DefaultMutableTreeNode t9 = new DefaultMutableTreeNode(Tables.Trainer);
        
        tables.add(t1); // tables의 child1
        tables.add(t2); // tables의 child2
        tables.add(t3); // tables의 child3
        tables.add(t4); // tables의 child4
        tables.add(t5); // tables의 child5
        tables.add(t6); // tables의 child6
        tables.add(t7); // tables의 child7
        tables.add(t8); // tables의 child8
        tables.add(t9); // tables의 child9
        
        treeModel.reload(); // refresh (마지막에 실행)
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jTextField9 = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton7 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jTextField10 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTree1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jTree1);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(226, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel5);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jButton1.setBackground(new java.awt.Color(102, 195, 239));
        jButton1.setFont(new java.awt.Font("Arial", 1, 10)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("New");
        jButton1.setBorderPainted(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton1);

        jButton2.setBackground(new java.awt.Color(102, 195, 239));
        jButton2.setFont(new java.awt.Font("Arial", 1, 10)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Add");
        jButton2.setBorderPainted(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton2);

        jButton3.setBackground(new java.awt.Color(102, 195, 239));
        jButton3.setFont(new java.awt.Font("Arial", 1, 10)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Update");
        jButton3.setBorderPainted(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton3);

        jButton4.setBackground(new java.awt.Color(102, 195, 239));
        jButton4.setFont(new java.awt.Font("Arial", 1, 10)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("Delete");
        jButton4.setBorderPainted(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton4);

        jButton5.setBackground(new java.awt.Color(102, 195, 239));
        jButton5.setFont(new java.awt.Font("Arial", 1, 10)); // NOI18N
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("Print");
        jButton5.setBorderPainted(false);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton5);

        jButton6.setBackground(new java.awt.Color(102, 195, 239));
        jButton6.setFont(new java.awt.Font("Arial", 1, 10)); // NOI18N
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setText("Search");
        jButton6.setBorderPainted(false);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton6);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        jPanel3.setBackground(new java.awt.Color(102, 195, 239));

        jLabel1.setFont(new java.awt.Font("맑은 고딕", 0, 12)); // NOI18N
        jLabel1.setText("jLabel1");

        jLabel2.setFont(new java.awt.Font("맑은 고딕", 0, 12)); // NOI18N
        jLabel2.setText("jLabel2");

        jLabel3.setFont(new java.awt.Font("맑은 고딕", 0, 12)); // NOI18N
        jLabel3.setText("jLabel3");

        jLabel4.setFont(new java.awt.Font("맑은 고딕", 0, 12)); // NOI18N
        jLabel4.setText("jLabel4");

        jLabel5.setFont(new java.awt.Font("맑은 고딕", 0, 12)); // NOI18N
        jLabel5.setText("jLabel5");

        jLabel6.setFont(new java.awt.Font("맑은 고딕", 0, 12)); // NOI18N
        jLabel6.setText("jLabel6");

        jLabel7.setFont(new java.awt.Font("맑은 고딕", 0, 12)); // NOI18N
        jLabel7.setText("jLabel7");

        jLabel8.setFont(new java.awt.Font("맑은 고딕", 0, 12)); // NOI18N
        jLabel8.setText("jLabel8");

        jLabel9.setFont(new java.awt.Font("맑은 고딕", 0, 12)); // NOI18N
        jLabel9.setText("jLabel9");

        jTextField1.setFont(new java.awt.Font("맑은 고딕", 0, 12)); // NOI18N
        jTextField1.setText("jTextField1");

        jTextField2.setFont(new java.awt.Font("맑은 고딕", 0, 12)); // NOI18N
        jTextField2.setText("jTextField2");

        jTextField3.setFont(new java.awt.Font("맑은 고딕", 0, 12)); // NOI18N
        jTextField3.setText("jTextField3");

        jTextField4.setFont(new java.awt.Font("맑은 고딕", 0, 12)); // NOI18N
        jTextField4.setText("jTextField4");

        jTextField5.setFont(new java.awt.Font("맑은 고딕", 0, 12)); // NOI18N
        jTextField5.setText("jTextField5");

        jTextField6.setFont(new java.awt.Font("맑은 고딕", 0, 12)); // NOI18N
        jTextField6.setText("jTextField6");

        jTextField7.setFont(new java.awt.Font("맑은 고딕", 0, 12)); // NOI18N
        jTextField7.setText("jTextField7");

        jTextField8.setFont(new java.awt.Font("맑은 고딕", 0, 12)); // NOI18N
        jTextField8.setText("jTextField8");

        jTextField9.setFont(new java.awt.Font("맑은 고딕", 0, 12)); // NOI18N
        jTextField9.setText("jTextField9");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1)
                    .addComponent(jTextField2)
                    .addComponent(jTextField3)
                    .addComponent(jTextField4)
                    .addComponent(jTextField5)
                    .addComponent(jTextField6)
                    .addComponent(jTextField7)
                    .addComponent(jTextField8)
                    .addComponent(jTextField9))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane4.setViewportView(jTextArea2);

        jButton7.setBackground(new java.awt.Color(102, 195, 239));
        jButton7.setFont(new java.awt.Font("굴림", 1, 10)); // NOI18N
        jButton7.setForeground(new java.awt.Color(255, 255, 255));
        jButton7.setText("<");
        jButton7.setBorderPainted(false);
        jButton7.setMargin(new java.awt.Insets(2, 10, 2, 10));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jTextField10.setText("jTextField10");
        jTextField10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField10ActionPerformed(evt);
            }
        });

        jLabel10.setText("jLabel10");

        jLabel11.setText("jLabel11");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(132, 132, 132))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 582, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 49, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton7)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree1ValueChanged
        gs = mySelectedNode();

        if (gs == "About"){
            AboutFrame af = new AboutFrame();
            af.setVisible(true);
        }
        else {
            for(int i = 0; i < 9; i++){
                if(gs == tables[i]) {
                    jLabel10.setText("Enter " + gs + " Name");
                    showData(gs);
                }
            }
        }
    }//GEN-LAST:event_jTree1ValueChanged

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        String st = mySelectedNode();
        showFields();
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        clearTextField();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        addRecordIS();
        //addRecordSP();
        //addRecordRS();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        String direction = jButton7.getText();

        if(direction == "<"){
            jPanel5.setVisible(false);
            jButton7.setText(">");
        }
        else {
            jPanel5.setVisible(true);
            jButton7.setText("<");
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        //updateRecordUS();
        //updateRecordSP();
        updateRecordRS();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        //deleteRecordDS();
        deleteRecordSP();
        //deleteRecordRS();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        runReport();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        searchTable();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jTextField10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField10ActionPerformed
        jButton6ActionPerformed(evt);
    }//GEN-LAST:event_jTextField10ActionPerformed
    
    private void addRecordIS(){
        String sn = mySelectedNode();
        try {
            int col = jTable1.getColumnCount();
            
            String sql = "insert into " + sn + " values(";
            for(int i = 0; i < col - 1; i++){ sql += "?,"; }
            sql += "?)";
            
            String sql2 = "select COLUMN_NAME, DATA_TYPE from INFORMATION_SCHEMA.COLUMNS where TABLE_NAME=?";
            
            PreparedStatement pst = con.prepareStatement(sql2);
            pst.setString(1, sn);
            ResultSet rs = pst.executeQuery();
            
            pst = con.prepareStatement(sql);
               
            rs.next();
            for(int i = 0; i < col; i++, rs.next()){
                String dataType = rs.getString("DATA_TYPE").toString();
                
                if("int".equals(dataType)){
                    pst.setInt(i + 1, Integer.parseInt(tf[i].getText().toString()));
                }
                else if("real".equals(dataType)){
                    pst.setFloat(i + 1, Float.parseFloat(tf[i].getText().toString()));
                }
                else{
                    pst.setString(i + 1, tf[i].getText().toString());
                }
                
            }
            
            int num = pst.executeUpdate();
            jTextArea2.append("Record is added" + "\n");
            showData(sn);
            pst.close();            
        }
        catch(SQLException e) {
            jTextArea2.append(e.getMessage());
        }
        catch(Exception e2) {
            jTextArea2.append("Problem in addRecordIS()" + "\n");
        }
    }
  
    private void addRecordSP(){
        String sn = mySelectedNode();
        String record = "";
        int col = jTable1.getColumnCount();
        try {
            String sql = "{call addRecord(?,?)}";
            CallableStatement cst = con.prepareCall(sql);
            cst.setString(1, sn);
            
            for(int i = 0; i < col - 1; i++){
                record += tf[i].getText();
                record += ",";
            }
            record += tf[col - 1].getText();
            
            cst.setString(2, record);
            cst.execute();
            
            jTextArea2.append("Record is added" + "\n");
            
            showData(sn);
            
            cst.close();
        }
        catch(SQLException e) {
            jTextArea2.append(e.getMessage());
        }
        catch(Exception e2) {
            jTextArea2.append("Problem in addRecordSP()" + "\n");
        }
    }
    
    private void addRecordRS(){
        String sn = mySelectedNode();
        try{
            String sql = "select * from " + sn + "";
            PreparedStatement pst = con.prepareStatement(sql, ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            ResultSet rs = pst.executeQuery();
            int col = jTable1.getColumnCount();

            rs.moveToInsertRow();
            
            for(int i = 0; i < col; i++){
                rs.updateString(i + 1, tf[i].getText());
            }
            
            rs.insertRow();
            rs.moveToCurrentRow();
            
            jTextArea2.append("Record is added" + "\n");
            
            showData(sn);
            
            pst.close();
            rs.close();
        }
        catch(SQLException e) {
            jTextArea2.append(e.getMessage());
        }
        catch(Exception e2) {
            jTextArea2.append("Problem in addRecordRS()" + "\n");
        }
    }
    
    private void updateRecordUS(){
        String sn = mySelectedNode();
        try{
            int rownum = jTable1.getSelectedRow();
            int col = jTable1.getColumnCount();
            String id = jTable1.getModel().getValueAt(rownum, 0).toString();
            String sql = "update " + sn + " set ";
            
            for(int i = 1; i < col - 1; i++){
                sql +=  jTable1.getModel().getColumnName(i) + "=?,";
            }
            sql +=  jTable1.getModel().getColumnName(col - 1) + "=?";
            sql += " where " + jTable1.getModel().getColumnName(0) + "=?";
            
            String sql2 = "select COLUMN_NAME, DATA_TYPE from INFORMATION_SCHEMA.COLUMNS where TABLE_NAME=?";
            
            PreparedStatement pst = con.prepareStatement(sql2);
            pst.setString(1, sn);
            ResultSet rs = pst.executeQuery();
            
            pst = con.prepareStatement(sql);
            
            rs.next();
            rs.next();
            for(int i = 1; i < col; i++, rs.next()){
                String dataType = rs.getString("DATA_TYPE").toString();
                
                if("int".equals(dataType)){
                    pst.setInt(i, Integer.parseInt(tf[i].getText().toString()));
                }
                else if("real".equals(dataType)){
                    pst.setFloat(i, Float.parseFloat(tf[i].getText().toString()));
                }
                else{
                    pst.setString(i, tf[i].getText().toString());
                }       
            }
            pst.setString(col, id);
            
            pst.executeUpdate();
            
            jTextArea2.append("Row is updated" + "\n");
            showData(sn);
            pst.close();
        }
        catch(SQLException e) {
            jTextArea2.append(e.getMessage());
        }
        catch(Exception e2) {
            jTextArea2.append("Problem in updateRecordUS()" + "\n");
        }
    }
    
    private void updateRecordSP(){
        String sn = mySelectedNode();
        String record = "";
        int col = jTable1.getColumnCount();
        int rowNum = jTable1.getSelectedRow();
        String id = jTable1.getModel().getValueAt(rowNum, 0).toString();
        try{
            String sql = "{call updateRecord(?,?)}";
            CallableStatement cst = con.prepareCall(sql);
            
            cst.setString(1, sn);
            
            for(int i = 0; i < col - 1; i++){
                record += tf[i].getText();
                record += ",";
            }
            record += tf[col - 1].getText();
            
            cst.setString(2, record);
            cst.execute();
            jTextArea2.append("Row is updated" + "\n");
            showData(sn);
            cst.close();
        }
        catch(SQLException e) {
            jTextArea2.append(e.getMessage());
        }
        catch(Exception e2) {
            jTextArea2.append("Problem in updateRecordSP()" + "\n");
        }
    }
    
    private void updateRecordRS(){
        String sn = mySelectedNode();
        try{
            int rowNum = jTable1.getSelectedRow();
            int col = jTable1.getColumnCount();
            String id = jTable1.getModel().getValueAt(rowNum, 0).toString();
            
            String sql = "select * from " + sn + "";
            PreparedStatement pst = con.prepareStatement(sql, ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            ResultSet rs = pst.executeQuery();
            
            rs.absolute(rowNum + 1);
            for(int i = 1; i < col; i++){
                rs.updateString(i + 1, tf[i].getText());
            }
            rs.updateRow();
            rs.moveToCurrentRow();
            
            jTextArea2.append("Record is updated" + "\n");
            
            showData(sn);
            
            pst.close();
            rs.close();
        }
        catch(SQLException e) {
            jTextArea2.append(e.getMessage());
        }
        catch(Exception e2) {
            jTextArea2.append("Problem in updateRecordRS()" + "\n");
        }
    }
    
    private void deleteRecordDS(){
        String sn = mySelectedNode();
        try{
            int rowNum = jTable1.getSelectedRow();
            String colName = jTable1.getModel().getColumnName(0);
            String id = jTable1.getModel().getValueAt(rowNum, 0).toString();
            String sql = "delete from " + sn + " where " + colName + "=?";
            
            PreparedStatement pst = con.prepareStatement(sql);
            pst.setString(1, id);
            pst.executeUpdate();
            
            jTextArea2.append("Record is deleted" + "\n");
            showData(sn);
            pst.close();  
        }
        catch(SQLException e) {
            jTextArea2.append(e.getMessage());
        }
        catch(Exception e2) {
            jTextArea2.append("Problem in deleteRecordDS()" + "\n");
        }
    }
    
    private void deleteRecordSP(){
        String sn = mySelectedNode();
        try{
            int rowNum = jTable1.getSelectedRow();
            String id = jTable1.getModel().getValueAt(rowNum, 0).toString();
            String sql = "{call deleteRecord(?,?)}";
            
            CallableStatement cst = con.prepareCall(sql);
            cst.setString(1, sn);
            cst.setString(2, id);
            cst.execute();
            
            jTextArea2.append("Record is deleted" + "\n");
            showData(sn);
            cst.close(); 
        }
        catch(SQLException e) {
            jTextArea2.append(e.getMessage());
        }
        catch(Exception e2) {
            jTextArea2.append("Problem in deleteRecordSP()" + "\n");
        }
    }
    
    private void deleteRecordRS(){
        String sn = mySelectedNode();
        try{
            int rowNum = jTable1.getSelectedRow();
            
            String sql = "select * from " + sn + "";
            PreparedStatement pst = con.prepareStatement(sql, ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            ResultSet rs = pst.executeQuery();
            
            rs.absolute(rowNum + 1);
            rs.deleteRow();
            rs.moveToCurrentRow();
            
            jTextArea2.append("Record is deleted" + "\n");
            showData(sn);
            rs.close();
            pst.close();
        }
        catch(SQLException e) {
            jTextArea2.append(e.getMessage());
        }
        catch(Exception e2) {
            jTextArea2.append("Problem in deleteRecordRS()" + "\n");
        }
    }
    
    private void clearTextField(){
        clearFields();
        int selectedRow = jTable1.getSelectedRow();
        int noc = jTable1.getColumnCount();
        
        for(int i = 0; i < noc; i++){
                tf[i].setVisible(true);
                lb[i].setVisible(true);
                lb[i].setText(jTable1.getColumnName(i));
                tf[i].setText("");
        }
    }
    
    private void clearFields(){
        for(int i = 0; i < 9; i++){
            tf[i].setText("");
            tf[i].setVisible(false);
            
            lb[i].setText("");
            lb[i].setVisible(false);
        }
    }
    
    private void showData(String st){
        String sql = "select * from " + st + ""; // Dynamic SQL
        PreparedStatement pst = null;
        ResultSet rs = null;
        
        try{
            pst = con.prepareStatement(sql);
            rs = pst.executeQuery();
            
            jTable1.setModel(rstoModel(rs));
            
            // 프로그램 실행 시 테이블의 열이 범위로 선택되어 있음
            jTable1.setRowSelectionInterval(0, 0);
            showFields();
            
            // important !!
            rs.close();
            pst.close();
        }
        catch(Exception e){
            jTextArea2.append("Problem in showData()\n");
        }
        finally{
        }
    }
    private void showFields(){
        clearFields();
        int selectedRow = jTable1.getSelectedRow();
        int noc = jTable1.getColumnCount();
        
        for(int i = 0; i < noc; i++){
            if(jTable1.getValueAt(selectedRow, i) != null){
                tf[i].setText(jTable1.getValueAt(selectedRow, i).toString());
            }
            else{
                tf[i].setText("");
            }
            
            tf[i].setVisible(true);
            lb[i].setText(jTable1.getColumnName(i));
            lb[i].setVisible(true);
        }
    }
      
    private String mySelectedNode(){
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)jTree1.getLastSelectedPathComponent();
        
        String ns = node.getUserObject().toString();
        
        return ns;
    }
    
    private TableModel rstoModel(ResultSet rs){
        try{
            ResultSetMetaData rsmd = rs.getMetaData();
            int noc = rsmd.getColumnCount();
            
            // Nmaes of columns
            Vector cnames = new Vector();
            for(int i = 1; i <= noc; i++){ // 0에서 시작X
                cnames.addElement(rsmd.getColumnLabel(i));
            }
            
            // Rows(Data)
            Vector rows = new Vector();
            while(rs.next()){
                Vector newrow = new Vector();
                for(int i = 1; i <= noc; i++){
                    newrow.addElement(rs.getObject(i));
                }
                
                rows.addElement(newrow);
            }
            
            jLabel11.setText(Integer.toString(rows.size()) + " results found.");
            
            return new DefaultTableModel(rows, cnames);
        }
        catch(Exception e){
            jTextArea2.append("Problem in rstoModel()\n");
            return null;
        }
    } 
    
    private void searchTable(){
        String sn = mySelectedNode();
        try{
            int col = jTable1.getColumnCount();
            String text = jTextField10.getText();
            String sql = "select * from " + sn + " where ";
            
            for(int i = 0; i < col - 1; i++){
                sql += jTable1.getModel().getColumnName(i).toString();
                sql += " like ? or ";
            }
            sql += jTable1.getModel().getColumnName(col - 1).toString();
            sql += " like ?";
            
            PreparedStatement pst = con.prepareStatement(sql);
            
            for(int i = 1; i <= col; i++){
                pst.setString(i, "%" + text + "%");
            }
            
            ResultSet rs = pst.executeQuery();
            jTable1.setModel(rstoModel(rs));
            // 프로그램 실행 시 테이블의 열이 범위로 선택되어 있음
            jTable1.setRowSelectionInterval(0, 0);
            showFields();
            
            // important !!
            rs.close();
            pst.close();
        }
        catch(SQLException e) {
            jTextArea2.append(e.getMessage());
        }
        catch(Exception e2) {
            jTextArea2.append("Problem in searchTable()" + "\n");
        }
    }
    
    private void runReport(){
        String sn = mySelectedNode();
        try{
            String rp = "";
            if(sn == Tables.Apply.toString()){
                rp = "C:\\database\\myApplication\\myDBProject24\\src\\mydbproject24\\reportApply.jrxml";
            }
            else if(sn == Tables.Customer.toString()){
                rp = "C:\\database\\myApplication\\myDBProject24\\src\\mydbproject24\\reportCustomer.jrxml";
            }
            else if(sn == Tables.Equipment.toString()){
                rp = "C:\\database\\myApplication\\myDBProject24\\src\\mydbproject24\\reportEquipment.jrxml";
            }
            else if(sn == Tables.Equipment_Check.toString()){
                rp = "C:\\database\\myApplication\\myDBProject24\\src\\mydbproject24\\reportEquipment_Check.jrxml";
            }
            else if(sn == Tables.Program.toString()){
                rp = "C:\\database\\myApplication\\myDBProject24\\src\\mydbproject24\\reportProgram.jrxml";
            }
            else if(sn == Tables.Repairman.toString()){
                rp = "C:\\database\\myApplication\\myDBProject24\\src\\mydbproject24\\reportRepairman.jrxml";
            }
            else if(sn == Tables.Room.toString()){
                rp = "C:\\database\\myApplication\\myDBProject24\\src\\mydbproject24\\reportRoom.jrxml";
            }
            else if(sn == Tables.Trainer.toString()){
                rp = "C:\\database\\myApplication\\myDBProject24\\src\\mydbproject24\\reportTrainer.jrxml";
            }

            if(rp != ""){
                JasperReport report = JasperCompileManager.compileReport(rp);
                JasperPrint myprint = JasperFillManager.fillReport(report, null, con);
                JasperViewer.viewReport(myprint, false);
            }
        }
        catch(Exception e){
            jTextArea2.append("Problem in runReport()\n");
        }
    }
    
    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables
}
